package k8stopserviepatches

test_input_denied_loadbalancer_service_patch {
    input := input_review("LoadBalancer", service_loadbalancer_bad_status)
    results := violation with input as input
    count(results) == 1
}

test_input_allowed_loadbalancer_service_patch {
    input := input_review("LoadBalancer", service_loadbalancer_good_status)
    results := violation with input as input
    count(results) == 0
}

test_input_denied_dual_loadbalancer_service_patch {
    input := input_review("LoadBalancer", dual_service_loadbalancer_bad_status)
    results := violation with input as input
    count(results) == 1
}

test_input_allowed_clusterip_service_patch {
    input := input_review("ClusterIP", service_clusterip_good_status)
    results := violation with input as input
    count(results) == 0
}

test_input_denied_clusterip_service_patch {
    input := input_review("ClusterIP", service_clusterip_bad_status)
    results := violation with input as input
    count(results) == 1
}

test_input_allowed_nodeport_service_patch {
    input := input_review("NodePort", service_nodeport_good_status)
    results := violation with input as input
    count(results) == 0
}

test_input_denied_nodeport_service_patch {
    input := input_review("NodePort", service_nodeport_bad_status)
    results := violation with input as input
    count(results) == 1
}



input_review(service_type, service_status) = output {
    output = {
      "review": {
        "kind": {
          "kind": "Service"
        },
        "subResource": "status",
        "requestSubResource": "status",
        "name": "mitm-lb",
        "namespace": "kubeproxy-mitm",
        "operation": "UPDATE",
        "oldObject": {
          "spec": {
            "type": service_type
          },
          "status": service_status.old_status
        },
        "userInfo": {
          "username": "masterclient"
        },
        "object": {
          "spec": {
            "type": service_type
          },
          "status": service_status.new_status
        }
      }
   }
}

service_loadbalancer_bad_status = {
  "old_status": {
    "loadBalancer": {
      "ingress": [
        {
          "ip": "1.1.1.1"
        }
      ]
    }
  },
  "new_status": {
    "loadBalancer": {
      "ingress": [
        {
          "ip": "2.2.2.2"
        }
      ]
    }
  }
}

service_loadbalancer_good_status = {
  "old_status": {
    "loadBalancer": {
      "ingress": [
        {
          "ip": "1.1.1.1"
        }
      ]
    }
  },
  "new_status": {
    "loadBalancer": {
      "ingress": [
        {
          "ip": "1.1.1.1"
        }
      ]
    }
  }
}

## Other use cases also should be tested for sual services
dual_service_loadbalancer_bad_status = {
  "old_status": {
    "loadBalancer": {
      "ingress": [
        {
          "ip": "1.1.1.1"
        },
        {
          "ip": "2.2.2.2"
        }
      ]
    }
  },
  "new_status": {
    "loadBalancer": {
      "ingress": [
        {
          "ip": "1.1.1.1"
        },
        {
          "ip": "3.3.3.3"
        }
      ]
    }
  }
}


service_clusterip_good_status = {
  "old_status": {},
  "new_status": {}
}

service_clusterip_bad_status = {
  "old_status": {},
  "new_status": {
    "loadBalancer": {
      "ingress": [
        {
          "ip": "1.1.1.1"
        }
      ]
    }
  }
}

service_nodeport_good_status = {
  "old_status": {},
  "new_status": {}
}

service_nodeport_bad_status = {
  "old_status": {},
  "new_status": {
    "loadBalancer": {
      "ingress": [
        {
          "ip": "1.1.1.1"
        }
      ]
    }
  }
}